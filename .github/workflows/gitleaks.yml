---
name: Gitleaks Secret Scanning

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  gitleaks:
    name: Scan for secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ## Fetch all history for all branches and tags
          fetch-depth: 0

      - name: Install chezmoi
        run: |
          sh -c "$(curl -fsLS get.chezmoi.io)" -- -b /usr/local/bin
          chezmoi --version

      - name: Create temporary build directory
        run: |
          mkdir -p /tmp/chezmoi-build

      - name: Build chezmoi templates
        run: |
          ## Create directory for rendered templates
          mkdir -p /tmp/chezmoi-rendered
          
          ## Initialize chezmoi with the current repository as source
          export CHEZMOI_SOURCE_DIR="${GITHUB_WORKSPACE}"
          
          ## Set chezmoi data values to avoid prompts
          export CHEZMOI_DATA_custom_hostname="ci-test"
          
          ## Archive and extract rendered templates
          #  This processes all .tmpl files and outputs the final rendered content
          chezmoi archive --output=/tmp/chezmoi-build.tar --source="${GITHUB_WORKSPACE}" 2>&1 || {
            echo "Warning: chezmoi archive had issues, continuing anyway..."
          }
          
          ## Extract rendered templates if archive was created
          if [ -f /tmp/chezmoi-build.tar ]; then
            tar -xf /tmp/chezmoi-build.tar -C /tmp/chezmoi-rendered
            echo "Successfully extracted rendered templates"
            ls -la /tmp/chezmoi-rendered || true
          else
            echo "No archive created, templates may not have been rendered"
          fi

      - name: Scan source files with Gitleaks
        id: gitleaks-source
        continue-on-error: true
        run: |
          ## Install gitleaks if not present
          if ! command -v gitleaks &> /dev/null; then
            echo "Installing gitleaks..."
            wget -q https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_$(uname -s)_$(uname -m).tar.gz
            tar -xzf gitleaks_*.tar.gz
            chmod +x gitleaks
            sudo mv gitleaks /usr/local/bin/
          fi
          
          gitleaks version
          
          echo "================================"
          echo "Scanning source files..."
          echo "================================"
          
          ## Scan with git history, generate SARIF report
          gitleaks detect --source="${GITHUB_WORKSPACE}" --config="${GITHUB_WORKSPACE}/.gitleaks.toml" --report-path=gitleaks-source-report.sarif --report-format=sarif --exit-code=0 || true
          
          ## Also run with exit code to check for failures
          if ! gitleaks detect --source="${GITHUB_WORKSPACE}" --config="${GITHUB_WORKSPACE}/.gitleaks.toml" --verbose; then
            echo "Secrets found in source files"
            echo "source_scan_failed=true" >> $GITHUB_OUTPUT
          else
            echo "No secrets found in source files"
            echo "source_scan_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Scan rendered templates with Gitleaks
        id: gitleaks-rendered
        if: always()
        run: |
          ## Install gitleaks if not present
          if ! command -v gitleaks &> /dev/null; then
            echo "Installing gitleaks..."
            wget -q https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_$(uname -s)_$(uname -m).tar.gz
            tar -xzf gitleaks_*.tar.gz
            chmod +x gitleaks
            sudo mv gitleaks /usr/local/bin/
          fi
          
          gitleaks version
          
          ## Scan the rendered templates if directory exists
          SCAN_FAILED=0
          if [ -d /tmp/chezmoi-rendered ] && [ "$(ls -A /tmp/chezmoi-rendered 2>/dev/null)" ]; then
            echo "================================"
            echo "Scanning rendered chezmoi templates..."
            echo "================================"
            
            ## Always generate SARIF report first (with exit-code=0 to not fail)
            gitleaks detect --source=/tmp/chezmoi-rendered --config="${GITHUB_WORKSPACE}/.gitleaks.toml" --no-git --report-path=gitleaks-rendered-report.sarif --report-format=sarif --exit-code=0 || true
            
            ## Also generate JSON report and check for leaks
            if ! gitleaks detect --source=/tmp/chezmoi-rendered --config="${GITHUB_WORKSPACE}/.gitleaks.toml" --verbose --no-git --report-path=gitleaks-rendered-report.json --report-format=json; then
              echo "Secrets found in rendered templates"
              SCAN_FAILED=1
            else
              echo "No secrets found in rendered templates"
            fi
          else
            echo "No rendered templates found to scan"
            ## Create valid empty SARIF file
            cat > gitleaks-rendered-report.sarif << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Gitleaks",
                    "informationUri": "https://github.com/gitleaks/gitleaks"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          fi
          
          ## Exit with error if secrets were found
          if [ $SCAN_FAILED -eq 1 ]; then
            echo "================================"
            echo "Gitleaks scan failed - secrets detected"
            echo "================================"
            echo "rendered_scan_failed=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "rendered_scan_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Verify SARIF reports
        if: always()
        run: |
          echo "Checking for SARIF reports..."
          ls -lah *.sarif 2>/dev/null || echo "No SARIF files found"
          
          if [ -f gitleaks-source-report.sarif ]; then
            echo "Source SARIF exists ($(wc -c < gitleaks-source-report.sarif) bytes)"
            head -n 5 gitleaks-source-report.sarif
          fi
          
          if [ -f gitleaks-rendered-report.sarif ]; then
            echo "Rendered SARIF exists ($(wc -c < gitleaks-rendered-report.sarif) bytes)"
            head -n 5 gitleaks-rendered-report.sarif
          fi

      - name: Upload source SARIF to GitHub Security
        if: always() && hashFiles('gitleaks-source-report.sarif') != ''
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks-source-report.sarif
          category: gitleaks-source

      - name: Upload rendered SARIF to GitHub Security
        if: always() && hashFiles('gitleaks-rendered-report.sarif') != ''
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks-rendered-report.sarif
          category: gitleaks-rendered

      - name: Upload Gitleaks report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: |
            gitleaks-source-report.sarif
            gitleaks-rendered-report.json
            gitleaks-rendered-report.sarif
          retention-days: 7
          if-no-files-found: ignore

      - name: Fail if secrets detected
        if: always()
        run: |
          if [ "${{ steps.gitleaks-source.outputs.source_scan_failed }}" == "true" ] || [ "${{ steps.gitleaks-rendered.outputs.rendered_scan_failed }}" == "true" ]; then
            echo "================================"
            echo "FAILED: Secrets detected in scans"
            echo "================================"
            exit 1
          fi
