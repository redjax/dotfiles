---
name: Manual chezmoi archive

on:
  workflow_dispatch:
    inputs:
      bump:
        description: "Version bump type (patch, minor, major)"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install chezmoi
        id: install_chezmoi
        run: sh -c "$(curl -fsLS get.chezmoi.io)" -- -b ~/.local/bin
        shell: bash

      - name: Add chezmoi to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      ## Get the latest tag for version bump
      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)

          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi

          echo "Latest tag: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"

      ## Bump release version (v0.0.X -> v0.0.X+1)
      - name: Bump version
        id: bump_version
        run: |
          LATEST="${{ steps.get_tag.outputs.latest_tag }}"
          BUMP_TYPE="${{ github.event.inputs.bump }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST#v}"
          case "$BUMP_TYPE" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          NEW_TAG="$MAJOR.$MINOR.$PATCH"
          echo "New tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> "$GITHUB_OUTPUT"

      - name: Create chezmoi config for CI
        run: |
          VERSION="${{ steps.bump_version.outputs.NEW_TAG }}"
          GIT_USER="github-actions[bot]"
          GIT_EMAIL="41898282+52949282+github-actions[bot]@users.noreply.github.com"

          cat <<EOF > .chezmoi.toml
          [data]
            name = "${GIT_USER}"
            email = "${GIT_EMAIL}"
          EOF

      - name: Create rendered output directory
        run: |
          mkdir -p rendered/

      - name: Render dotfiles to output directory
        run: |
          chezmoi apply \
            --source $(pwd) \
            --config .chezmoi.toml \
            --config-format toml \
            --destination rendered/ \
            --keep-going \
            --no-tty \
            --verbose \
            --force

      - name: Add generated files to rendered/
        run: |
          ## Echo release version into file
          echo "${{ steps.bump_version.outputs.NEW_TAG }}" >> rendered/.version

      - name: Add help text
        run: |
          cat <<EOF > rendered/README.txt
          Github: https://github.com/redjax/dotfiles.git

          ################
          # Instructions #
          ################

          MAKE A BACKUP! The steps below will overwrite your dotfiles with mine.

          Copy & paste the files in this directory to your $HOME directory, opting to replace/overwrite existing files.
          Close & re-open your terminal (or log out and back in), or run exec $SHELL to load the dotfiles.
          EOF

      - name: List files for debugging
        run: |
          echo "$(pwd) files:"
          ls -la .
          echo ""

          echo "Rendered files:"
          ls -la rendered/

      - name: Create release assets directory
        run: |
          mkdir -p release_assets/

      - name: Create ZIP archive of rendered dotfiles
        run: |
          VERSION="${{ steps.bump_version.outputs.NEW_TAG }}"
          ZIP_NAME="dotfiles-v${VERSION}.zip"

          cd rendered
          zip -r "../release_assets/${ZIP_NAME}" . -x \
            "rendered/" \
            ".gitconfig"
            "chezmoistate.db" \

      - name: Create TAR archive of rendered dotfiles
        run: |
          VERSION="${{ steps.bump_version.outputs.NEW_TAG }}"
          TAR_NAME="dotfiles-v${VERSION}.tar.gz"

          cd rendered
          tar -czf "../release_assets/${TAR_NAME}" \
            --exclude="rendered/" \
            --exclude=".gitconfig" \
            --exclude="chezmoistate.boltdb" \
            .

      ## Create the tag and push it
      - name: Create git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+52949282+github-actions[bot]@users.noreply.github.com"
          git tag "v${{ steps.bump_version.outputs.NEW_TAG }}"
          git push origin "v${{ steps.bump_version.outputs.NEW_TAG }}"

      ## Create the GitHub release with the new tag, auto-generated release notes, and assets
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.bump_version.outputs.NEW_TAG }}"
          name: "v${{ steps.bump_version.outputs.NEW_TAG }}"
          generate_release_notes: true
          token: ${{ secrets.RELEASE_TOKEN }}
          files: |
            release_assets/dotfiles-v${{ steps.bump_version.outputs.NEW_TAG }}.tar.gz
            release_assets/dotfiles-v${{ steps.bump_version.outputs.NEW_TAG }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
